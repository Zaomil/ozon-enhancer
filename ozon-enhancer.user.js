// ==UserScript==
// @name          Ozon Interface Enhancer
// @namespace     https://github.com/Zaomil
// @version       1.0.3
// @description   –£–ª—É—á—à–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Ozon: —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç–∑—ã–≤—ã –æ—Ç —Ö—É–¥—à–∏—Ö –∫ –ª—É—á—à–∏–º, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
// @author        Zaomil
// @license       MIT
// @icon          https://ozon.by/favicon.ico
// @match         https://*.ozon.by/*
// @grant         GM_getValue
// @grant         GM_setValue
// @grant         GM_addStyle
// @run-at        document-idle
// @homepageURL   https://github.com/Zaomil/ozon-enhancer
// @supportURL    https://github.com/Zaomil/ozon-enhancer/issues
// ==/UserScript==

(function() {
    'use strict';

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const DEFAULT_CONFIG = {
        sortReviews: true,
        expandDescription: true
    };

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —á–µ—Ä–µ–∑ Storage
    const CONFIG = {
        get sortReviews() {
            return GM_getValue('sortReviews', DEFAULT_CONFIG.sortReviews);
        },
        set sortReviews(value) {
            GM_setValue('sortReviews', value);
        },
        get expandDescription() {
            return GM_getValue('expandDescription', DEFAULT_CONFIG.expandDescription);
        },
        set expandDescription(value) {
            GM_setValue('expandDescription', value);
        }
    };

    // –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    let isSortingApplied = false;
    let panelCreated = false;

    /**
     * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç–∑—ã–≤—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞
     * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä ?sort=score_asc –≤ URL
     */
    function sortReviews() {
        if (!CONFIG.sortReviews || isSortingApplied) return;
        if (!location.pathname.includes('/product/')) return;

        const urlObj = new URL(location.href);
        const params = urlObj.searchParams;

        if (params.get('sort') !== 'score_asc') {
            params.set('sort', 'score_asc');
            history.replaceState(null, '', urlObj.toString());
            isSortingApplied = true;
            setTimeout(() => window.location.href = urlObj.toString(), 100);
        }
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
     * –ò—â–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –∏ CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
     */
    function expandDescription() {
        if (!CONFIG.expandDescription) return;
        try {
            const buttonTexts = ['–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é', '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', '–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é', '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë', '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å'];
            let found = false;

            // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
            for (const btn of document.querySelectorAll('button, [role="button"]')) {
                const btnText = btn.textContent?.trim() || '';
                if (buttonTexts.some(text => btnText.includes(text)) &&
                    btn.offsetParent !== null &&
                    btn.getAttribute('aria-expanded') !== 'true') {
                    btn.click();
                    found = true;
                    break;
                }
            }

            // –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            if (!found) {
                const classSelectors = [
                    '.ui-d0k',
                    '[data-widget="webDescription"] button',
                    '.description button',
                    '.info-section button',
                    '[class*="expandButton"]',
                    '[class*="showMore"]'
                ];

                for (const selector of classSelectors) {
                    const btn = document.querySelector(selector);
                    if (btn && btn.offsetParent !== null && btn.getAttribute('aria-expanded') !== 'true') {
                        btn.click();
                        found = true;
                        break;
                    }
                }
            }
        } catch (e) {
            console.error('OzonEnhancer: –û—à–∏–±–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –æ–ø–∏—Å–∞–Ω–∏—è', e);
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
     * @returns {HTMLDivElement} –°–æ–∑–¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–∞–Ω–µ–ª–∏
     */
    function createControlPanel() {
        if (panelCreated) return;
        panelCreated = true;

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞–Ω–µ–ª–∏
        const existingPanel = document.getElementById('ozon-enhancer-panel');
        if (existingPanel) existingPanel.remove();

        const panel = document.createElement('div');
        panel.id = 'ozon-enhancer-panel';
        panel.style.cssText = `
            position: fixed;
            top: 50px;
            right: 10px;
            background: #ffffff;
            border-radius: 12px;
            padding: 0;
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.16);
            z-index: 10000;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            min-width: 300px;
            overflow: hidden;
            border: 1px solid #eaeaea;
        `;

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        const header = document.createElement('div');
        header.textContent = 'Ozon Enhancer';
        header.style.cssText = `
            font-weight: 600;
            font-size: 18px;
            padding: 18px 20px;
            background: linear-gradient(135deg, #0066ff 0%, #0048cc 100%);
            color: white;
            display: flex;
            align-items: center;
            gap: 10px;
        `;

        const icon = document.createElement('div');
        icon.innerHTML = '‚ö°';
        icon.style.fontSize = '20px';
        header.prepend(icon);
        panel.appendChild(header);

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const settingsContainer = document.createElement('div');
        settingsContainer.style.padding = '16px 20px';
        panel.appendChild(settingsContainer);

        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
        settingsContainer.appendChild(createToggle(
            '–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã (–æ—Ç —Ö—É–¥—à–∏—Ö)',
            'üìä',
            CONFIG.sortReviews,
            checked => {
                CONFIG.sortReviews = checked;
                if (checked) {
                    isSortingApplied = false;
                    sortReviews();
                }
            }
        ));

        settingsContainer.appendChild(createToggle(
            '–ê–≤—Ç–æ-—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è',
            'üìù',
            CONFIG.expandDescription,
            checked => {
                CONFIG.expandDescription = checked;
                if (checked) expandDescription();
            }
        ));

        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = document.createElement('button');
        closeBtn.innerHTML = '&times;';
        closeBtn.title = '–ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å';
        closeBtn.style.cssText = `
            position: absolute;
            top: 14px;
            right: 14px;
            background: rgba(255,255,255,0.2);
            border: none;
            width: 28px;
            height: 28px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            color: white;
            font-size: 20px;
            line-height: 1;
            transition: all 0.2s;
        `;
        closeBtn.addEventListener('mouseover', () => closeBtn.style.background = 'rgba(255,255,255,0.3)');
        closeBtn.addEventListener('mouseout', () => closeBtn.style.background = 'rgba(255,255,255,0.2)');
        closeBtn.addEventListener('click', () => {
            panel.remove();
            panelCreated = false;
        });
        header.appendChild(closeBtn);

        document.body.appendChild(panel);
        return panel;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
     * @param {string} label - –¢–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏
     * @param {string} icon - –ò–∫–æ–Ω–∫–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {boolean} checked - –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     * @param {Function} onChange - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
     * @returns {HTMLDivElement} –°–æ–∑–¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
     */
    function createToggle(label, icon, checked, onChange) {
        const container = document.createElement('div');
        container.style.cssText = `
            display: flex;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #f0f0f0;
        `;

        // –ò–∫–æ–Ω–∫–∞
        const iconEl = document.createElement('div');
        iconEl.textContent = icon;
        iconEl.style.cssText = `
            font-size: 20px;
            margin-right: 12px;
            width: 24px;
            text-align: center;
        `;
        container.appendChild(iconEl);

        // –¢–µ–∫—Å—Ç
        const textContainer = document.createElement('div');
        textContainer.style.flex = '1';

        const labelEl = document.createElement('div');
        labelEl.textContent = label;
        labelEl.style.cssText = `
            font-weight: 500;
            font-size: 15px;
            color: #333;
            margin-bottom: 2px;
        `;
        textContainer.appendChild(labelEl);
        container.appendChild(textContainer);

        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
        const toggleContainer = document.createElement('label');
        toggleContainer.style.cssText = `
            position: relative;
            display: inline-block;
            width: 44px;
            height: 24px;
            flex-shrink: 0;
        `;

        const toggleInput = document.createElement('input');
        toggleInput.type = 'checkbox';
        toggleInput.checked = checked;
        toggleInput.style.cssText = `
            opacity: 0;
            width: 0;
            height: 0;
        `;
        toggleInput.addEventListener('change', () => onChange(toggleInput.checked));

        const toggleSlider = document.createElement('span');
        toggleSlider.style.cssText = `
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 24px;
        `;

        const toggleKnob = document.createElement('span');
        toggleKnob.style.cssText = `
            position: absolute;
            content: "";
            height: 20px;
            width: 20px;
            left: 2px;
            bottom: 2px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
            box-shadow: 0 1px 3px rgba(0,0,0,0.2);
        `;

        toggleSlider.appendChild(toggleKnob);
        toggleContainer.appendChild(toggleInput);
        toggleContainer.appendChild(toggleSlider);
        container.appendChild(toggleContainer);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
        const updateToggleStyle = () => {
            if (toggleInput.checked) {
                toggleSlider.style.backgroundColor = '#0066ff';
                toggleKnob.style.transform = 'translateX(20px)';
            } else {
                toggleSlider.style.backgroundColor = '#ccc';
                toggleKnob.style.transform = 'translateX(0)';
            }
        };
        toggleInput.addEventListener('change', updateToggleStyle);
        updateToggleStyle();

        return container;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    function createPanelToggle() {
        if (document.getElementById('ozon-enhancer-toggle')) return;

        const toggle = document.createElement('button');
        toggle.id = 'ozon-enhancer-toggle';
        toggle.innerHTML = '‚ö° Ozon Enhancer';
        toggle.addEventListener('click', createControlPanel);
        document.body.appendChild(toggle);
        return toggle;
    }

    // –ò–Ω—ä–µ–∫—Ü–∏—è —Å—Ç–∏–ª–µ–π
    GM_addStyle(`
        #ozon-enhancer-panel {
            transition: all 0.3s ease;
            animation: fadeIn 0.3s ease-out;
        }

        #ozon-enhancer-toggle {
            position: fixed !important;
            top: 10px !important;
            right: 10px !important;
            background: #0066ff !important;
            color: white !important;
            border: none !important;
            border-radius: 6px !important;
            padding: 10px 16px !important;
            cursor: pointer !important;
            z-index: 2147483647 !important;
            font-size: 14px !important;
            font-weight: 600 !important;
            box-shadow: 0 4px 12px rgba(0,102,255,0.3) !important;
            transition: all 0.2s ease !important;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        #ozon-enhancer-toggle:hover {
            background: #0052d9 !important;
            transform: translateY(-1px) !important;
            box-shadow: 0 6px 16px rgba(0,102,255,0.4) !important;
        }

        #ozon-enhancer-toggle:active {
            transform: translateY(0) !important;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
    `);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π URL
    const updateState = (type) => {
        const orig = history[type];
        return function() {
            const result = orig.apply(this, arguments);
            window.dispatchEvent(new Event('locationchange'));
            return result;
        };
    };

    history.pushState = updateState('pushState');
    history.replaceState = updateState('replaceState');
    window.addEventListener('popstate', () => window.dispatchEvent(new Event('locationchange')));

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    function init() {
        createPanelToggle();
        sortReviews();
        expandDescription();

        // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM
        const observer = new MutationObserver(() => {
            createPanelToggle();
            if (document.getElementById('ozon-enhancer-panel')) return;
            expandDescription();
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        setInterval(expandDescription, 5000);
    }

    // –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        setTimeout(init, 1500);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è URL
    window.addEventListener('locationchange', () => {
        isSortingApplied = false;
        sortReviews();
        expandDescription();
    });
})();
